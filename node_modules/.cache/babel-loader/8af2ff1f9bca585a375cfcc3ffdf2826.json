{"ast":null,"code":"'use strict';\n\nlet Declaration = require('./declaration');\n\nlet tokenizer = require('./tokenize');\n\nlet Comment = require('./comment');\n\nlet AtRule = require('./at-rule');\n\nlet Root = require('./root');\n\nlet Rule = require('./rule');\n\nclass Parser {\n  constructor(input) {\n    this.input = input;\n    this.root = new Root();\n    this.current = this.root;\n    this.spaces = '';\n    this.semicolon = false;\n    this.customProperty = false;\n    this.createTokenizer();\n    this.root.source = {\n      input,\n      start: {\n        offset: 0,\n        line: 1,\n        column: 1\n      }\n    };\n  }\n\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input);\n  }\n\n  parse() {\n    let token;\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken();\n\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1];\n          break;\n\n        case ';':\n          this.freeSemicolon(token);\n          break;\n\n        case '}':\n          this.end(token);\n          break;\n\n        case 'comment':\n          this.comment(token);\n          break;\n\n        case 'at-word':\n          this.atrule(token);\n          break;\n\n        case '{':\n          this.emptyRule(token);\n          break;\n\n        default:\n          this.other(token);\n          break;\n      }\n    }\n\n    this.endFile();\n  }\n\n  comment(token) {\n    let node = new Comment();\n    this.init(node, token[2]);\n    node.source.end = this.getPosition(token[3] || token[2]);\n    let text = token[1].slice(2, -2);\n\n    if (/^\\s*$/.test(text)) {\n      node.text = '';\n      node.raws.left = text;\n      node.raws.right = '';\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/);\n      node.text = match[2];\n      node.raws.left = match[1];\n      node.raws.right = match[3];\n    }\n  }\n\n  emptyRule(token) {\n    let node = new Rule();\n    this.init(node, token[2]);\n    node.selector = '';\n    node.raws.between = '';\n    this.current = node;\n  }\n\n  other(start) {\n    let end = false;\n    let type = null;\n    let colon = false;\n    let bracket = null;\n    let brackets = [];\n    let customProperty = start[1].startsWith('--');\n    let tokens = [];\n    let token = start;\n\n    while (token) {\n      type = token[0];\n      tokens.push(token);\n\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token;\n        brackets.push(type === '(' ? ')' : ']');\n      } else if (customProperty && colon && type === '{') {\n        if (!bracket) bracket = token;\n        brackets.push('}');\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens, customProperty);\n            return;\n          } else {\n            break;\n          }\n        } else if (type === '{') {\n          this.rule(tokens);\n          return;\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop());\n          end = true;\n          break;\n        } else if (type === ':') {\n          colon = true;\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop();\n        if (brackets.length === 0) bracket = null;\n      }\n\n      token = this.tokenizer.nextToken();\n    }\n\n    if (this.tokenizer.endOfFile()) end = true;\n    if (brackets.length > 0) this.unclosedBracket(bracket);\n\n    if (end && colon) {\n      if (!customProperty) {\n        while (tokens.length) {\n          token = tokens[tokens.length - 1][0];\n          if (token !== 'space' && token !== 'comment') break;\n          this.tokenizer.back(tokens.pop());\n        }\n      }\n\n      this.decl(tokens, customProperty);\n    } else {\n      this.unknownWord(tokens);\n    }\n  }\n\n  rule(tokens) {\n    tokens.pop();\n    let node = new Rule();\n    this.init(node, tokens[0][2]);\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens);\n    this.raw(node, 'selector', tokens);\n    this.current = node;\n  }\n\n  decl(tokens, customProperty) {\n    let node = new Declaration();\n    this.init(node, tokens[0][2]);\n    let last = tokens[tokens.length - 1];\n\n    if (last[0] === ';') {\n      this.semicolon = true;\n      tokens.pop();\n    }\n\n    node.source.end = this.getPosition(last[3] || last[2]);\n\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens);\n      node.raws.before += tokens.shift()[1];\n    }\n\n    node.source.start = this.getPosition(tokens[0][2]);\n    node.prop = '';\n\n    while (tokens.length) {\n      let type = tokens[0][0];\n\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break;\n      }\n\n      node.prop += tokens.shift()[1];\n    }\n\n    node.raws.between = '';\n    let token;\n\n    while (tokens.length) {\n      token = tokens.shift();\n\n      if (token[0] === ':') {\n        node.raws.between += token[1];\n        break;\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token]);\n        }\n\n        node.raws.between += token[1];\n      }\n    }\n\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0];\n      node.prop = node.prop.slice(1);\n    }\n\n    let firstSpaces = [];\n    let next;\n\n    while (tokens.length) {\n      next = tokens[0][0];\n      if (next !== 'space' && next !== 'comment') break;\n      firstSpaces.push(tokens.shift());\n    }\n\n    this.precheckMissedSemicolon(tokens);\n\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i];\n\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true;\n        let string = this.stringFrom(tokens, i);\n        string = this.spacesFromEnd(tokens) + string;\n        if (string !== ' !important') node.raws.important = string;\n        break;\n      } else if (token[1].toLowerCase() === 'important') {\n        let cache = tokens.slice(0);\n        let str = '';\n\n        for (let j = i; j > 0; j--) {\n          let type = cache[j][0];\n\n          if (str.trim().indexOf('!') === 0 && type !== 'space') {\n            break;\n          }\n\n          str = cache.pop()[1] + str;\n        }\n\n        if (str.trim().indexOf('!') === 0) {\n          node.important = true;\n          node.raws.important = str;\n          tokens = cache;\n        }\n      }\n\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break;\n      }\n    }\n\n    let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment');\n\n    if (hasWord) {\n      node.raws.between += firstSpaces.map(i => i[1]).join('');\n      firstSpaces = [];\n    }\n\n    this.raw(node, 'value', firstSpaces.concat(tokens), customProperty);\n\n    if (node.value.includes(':') && !customProperty) {\n      this.checkMissedSemicolon(tokens);\n    }\n  }\n\n  atrule(token) {\n    let node = new AtRule();\n    node.name = token[1].slice(1);\n\n    if (node.name === '') {\n      this.unnamedAtrule(node, token);\n    }\n\n    this.init(node, token[2]);\n    let type;\n    let prev;\n    let shift;\n    let last = false;\n    let open = false;\n    let params = [];\n    let brackets = [];\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken();\n      type = token[0];\n\n      if (type === '(' || type === '[') {\n        brackets.push(type === '(' ? ')' : ']');\n      } else if (type === '{' && brackets.length > 0) {\n        brackets.push('}');\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop();\n      }\n\n      if (brackets.length === 0) {\n        if (type === ';') {\n          node.source.end = this.getPosition(token[2]);\n          this.semicolon = true;\n          break;\n        } else if (type === '{') {\n          open = true;\n          break;\n        } else if (type === '}') {\n          if (params.length > 0) {\n            shift = params.length - 1;\n            prev = params[shift];\n\n            while (prev && prev[0] === 'space') {\n              prev = params[--shift];\n            }\n\n            if (prev) {\n              node.source.end = this.getPosition(prev[3] || prev[2]);\n            }\n          }\n\n          this.end(token);\n          break;\n        } else {\n          params.push(token);\n        }\n      } else {\n        params.push(token);\n      }\n\n      if (this.tokenizer.endOfFile()) {\n        last = true;\n        break;\n      }\n    }\n\n    node.raws.between = this.spacesAndCommentsFromEnd(params);\n\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params);\n      this.raw(node, 'params', params);\n\n      if (last) {\n        token = params[params.length - 1];\n        node.source.end = this.getPosition(token[3] || token[2]);\n        this.spaces = node.raws.between;\n        node.raws.between = '';\n      }\n    } else {\n      node.raws.afterName = '';\n      node.params = '';\n    }\n\n    if (open) {\n      node.nodes = [];\n      this.current = node;\n    }\n  }\n\n  end(token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon;\n    }\n\n    this.semicolon = false;\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces;\n    this.spaces = '';\n\n    if (this.current.parent) {\n      this.current.source.end = this.getPosition(token[2]);\n      this.current = this.current.parent;\n    } else {\n      this.unexpectedClose(token);\n    }\n  }\n\n  endFile() {\n    if (this.current.parent) this.unclosedBlock();\n\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon;\n    }\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces;\n  }\n\n  freeSemicolon(token) {\n    this.spaces += token[1];\n\n    if (this.current.nodes) {\n      let prev = this.current.nodes[this.current.nodes.length - 1];\n\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces;\n        this.spaces = '';\n      }\n    }\n  } // Helpers\n\n\n  getPosition(offset) {\n    let pos = this.input.fromOffset(offset);\n    return {\n      offset,\n      line: pos.line,\n      column: pos.col\n    };\n  }\n\n  init(node, offset) {\n    this.current.push(node);\n    node.source = {\n      start: this.getPosition(offset),\n      input: this.input\n    };\n    node.raws.before = this.spaces;\n    this.spaces = '';\n    if (node.type !== 'comment') this.semicolon = false;\n  }\n\n  raw(node, prop, tokens, customProperty) {\n    let token, type;\n    let length = tokens.length;\n    let value = '';\n    let clean = true;\n    let next, prev;\n\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i];\n      type = token[0];\n\n      if (type === 'space' && i === length - 1 && !customProperty) {\n        clean = false;\n      } else if (type === 'comment') {\n        prev = tokens[i - 1];\n        next = tokens[i + 1];\n\n        if (prev && next && prev[0] !== 'space' && next[0] !== 'space') {\n          value += token[1];\n        } else {\n          clean = false;\n        }\n      } else {\n        value += token[1];\n      }\n    }\n\n    if (!clean) {\n      let raw = tokens.reduce((all, i) => all + i[1], '');\n      node.raws[prop] = {\n        value,\n        raw\n      };\n    }\n\n    node[prop] = value;\n  }\n\n  spacesAndCommentsFromEnd(tokens) {\n    let lastTokenType;\n    let spaces = '';\n\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0];\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break;\n      spaces = tokens.pop()[1] + spaces;\n    }\n\n    return spaces;\n  }\n\n  spacesAndCommentsFromStart(tokens) {\n    let next;\n    let spaces = '';\n\n    while (tokens.length) {\n      next = tokens[0][0];\n      if (next !== 'space' && next !== 'comment') break;\n      spaces += tokens.shift()[1];\n    }\n\n    return spaces;\n  }\n\n  spacesFromEnd(tokens) {\n    let lastTokenType;\n    let spaces = '';\n\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0];\n      if (lastTokenType !== 'space') break;\n      spaces = tokens.pop()[1] + spaces;\n    }\n\n    return spaces;\n  }\n\n  stringFrom(tokens, from) {\n    let result = '';\n\n    for (let i = from; i < tokens.length; i++) {\n      result += tokens[i][1];\n    }\n\n    tokens.splice(from, tokens.length - from);\n    return result;\n  }\n\n  colon(tokens) {\n    let brackets = 0;\n    let token, type, prev;\n\n    for (let [i, element] of tokens.entries()) {\n      token = element;\n      type = token[0];\n\n      if (type === '(') {\n        brackets += 1;\n      }\n\n      if (type === ')') {\n        brackets -= 1;\n      }\n\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token);\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue;\n        } else {\n          return i;\n        }\n      }\n\n      prev = token;\n    }\n\n    return false;\n  } // Errors\n\n\n  unclosedBracket(bracket) {\n    throw this.input.error('Unclosed bracket', {\n      offset: bracket[2]\n    }, {\n      offset: bracket[2] + 1\n    });\n  }\n\n  unknownWord(tokens) {\n    throw this.input.error('Unknown word', {\n      offset: tokens[0][2]\n    }, {\n      offset: tokens[0][2] + tokens[0][1].length\n    });\n  }\n\n  unexpectedClose(token) {\n    throw this.input.error('Unexpected }', {\n      offset: token[2]\n    }, {\n      offset: token[2] + 1\n    });\n  }\n\n  unclosedBlock() {\n    let pos = this.current.source.start;\n    throw this.input.error('Unclosed block', pos.line, pos.column);\n  }\n\n  doubleColon(token) {\n    throw this.input.error('Double colon', {\n      offset: token[2]\n    }, {\n      offset: token[2] + token[1].length\n    });\n  }\n\n  unnamedAtrule(node, token) {\n    throw this.input.error('At-rule without name', {\n      offset: token[2]\n    }, {\n      offset: token[2] + token[1].length\n    });\n  }\n\n  precheckMissedSemicolon() {// Hook for Safe Parser\n  }\n\n  checkMissedSemicolon(tokens) {\n    let colon = this.colon(tokens);\n    if (colon === false) return;\n    let founded = 0;\n    let token;\n\n    for (let j = colon - 1; j >= 0; j--) {\n      token = tokens[j];\n\n      if (token[0] !== 'space') {\n        founded += 1;\n        if (founded === 2) break;\n      }\n    } // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\n    // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\n    // And because we need it after that one we do +1 to get the next one.\n\n\n    throw this.input.error('Missed semicolon', token[0] === 'word' ? token[3] + 1 : token[2]);\n  }\n\n}\n\nmodule.exports = Parser;","map":{"version":3,"names":["Declaration","require","tokenizer","Comment","AtRule","Root","Rule","Parser","constructor","input","root","current","spaces","semicolon","customProperty","createTokenizer","source","start","offset","line","column","parse","token","endOfFile","nextToken","freeSemicolon","end","comment","atrule","emptyRule","other","endFile","node","init","getPosition","text","slice","test","raws","left","right","match","selector","between","type","colon","bracket","brackets","startsWith","tokens","push","length","decl","rule","back","pop","unclosedBracket","unknownWord","spacesAndCommentsFromEnd","raw","last","before","shift","prop","firstSpaces","next","precheckMissedSemicolon","i","toLowerCase","important","string","stringFrom","spacesFromEnd","cache","str","j","trim","indexOf","hasWord","some","map","join","concat","value","includes","checkMissedSemicolon","name","unnamedAtrule","prev","open","params","afterName","spacesAndCommentsFromStart","nodes","after","parent","unexpectedClose","unclosedBlock","ownSemicolon","pos","fromOffset","col","clean","reduce","all","lastTokenType","from","result","splice","element","entries","doubleColon","error","founded","module","exports"],"sources":["C:/Users/ekasi_swt_coom00577/Desktop/hotelapp2/node_modules/postcss/lib/parser.js"],"sourcesContent":["'use strict'\r\n\r\nlet Declaration = require('./declaration')\r\nlet tokenizer = require('./tokenize')\r\nlet Comment = require('./comment')\r\nlet AtRule = require('./at-rule')\r\nlet Root = require('./root')\r\nlet Rule = require('./rule')\r\n\r\nclass Parser {\r\n  constructor(input) {\r\n    this.input = input\r\n\r\n    this.root = new Root()\r\n    this.current = this.root\r\n    this.spaces = ''\r\n    this.semicolon = false\r\n    this.customProperty = false\r\n\r\n    this.createTokenizer()\r\n    this.root.source = { input, start: { offset: 0, line: 1, column: 1 } }\r\n  }\r\n\r\n  createTokenizer() {\r\n    this.tokenizer = tokenizer(this.input)\r\n  }\r\n\r\n  parse() {\r\n    let token\r\n    while (!this.tokenizer.endOfFile()) {\r\n      token = this.tokenizer.nextToken()\r\n\r\n      switch (token[0]) {\r\n        case 'space':\r\n          this.spaces += token[1]\r\n          break\r\n\r\n        case ';':\r\n          this.freeSemicolon(token)\r\n          break\r\n\r\n        case '}':\r\n          this.end(token)\r\n          break\r\n\r\n        case 'comment':\r\n          this.comment(token)\r\n          break\r\n\r\n        case 'at-word':\r\n          this.atrule(token)\r\n          break\r\n\r\n        case '{':\r\n          this.emptyRule(token)\r\n          break\r\n\r\n        default:\r\n          this.other(token)\r\n          break\r\n      }\r\n    }\r\n    this.endFile()\r\n  }\r\n\r\n  comment(token) {\r\n    let node = new Comment()\r\n    this.init(node, token[2])\r\n    node.source.end = this.getPosition(token[3] || token[2])\r\n\r\n    let text = token[1].slice(2, -2)\r\n    if (/^\\s*$/.test(text)) {\r\n      node.text = ''\r\n      node.raws.left = text\r\n      node.raws.right = ''\r\n    } else {\r\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\r\n      node.text = match[2]\r\n      node.raws.left = match[1]\r\n      node.raws.right = match[3]\r\n    }\r\n  }\r\n\r\n  emptyRule(token) {\r\n    let node = new Rule()\r\n    this.init(node, token[2])\r\n    node.selector = ''\r\n    node.raws.between = ''\r\n    this.current = node\r\n  }\r\n\r\n  other(start) {\r\n    let end = false\r\n    let type = null\r\n    let colon = false\r\n    let bracket = null\r\n    let brackets = []\r\n    let customProperty = start[1].startsWith('--')\r\n\r\n    let tokens = []\r\n    let token = start\r\n    while (token) {\r\n      type = token[0]\r\n      tokens.push(token)\r\n\r\n      if (type === '(' || type === '[') {\r\n        if (!bracket) bracket = token\r\n        brackets.push(type === '(' ? ')' : ']')\r\n      } else if (customProperty && colon && type === '{') {\r\n        if (!bracket) bracket = token\r\n        brackets.push('}')\r\n      } else if (brackets.length === 0) {\r\n        if (type === ';') {\r\n          if (colon) {\r\n            this.decl(tokens, customProperty)\r\n            return\r\n          } else {\r\n            break\r\n          }\r\n        } else if (type === '{') {\r\n          this.rule(tokens)\r\n          return\r\n        } else if (type === '}') {\r\n          this.tokenizer.back(tokens.pop())\r\n          end = true\r\n          break\r\n        } else if (type === ':') {\r\n          colon = true\r\n        }\r\n      } else if (type === brackets[brackets.length - 1]) {\r\n        brackets.pop()\r\n        if (brackets.length === 0) bracket = null\r\n      }\r\n\r\n      token = this.tokenizer.nextToken()\r\n    }\r\n\r\n    if (this.tokenizer.endOfFile()) end = true\r\n    if (brackets.length > 0) this.unclosedBracket(bracket)\r\n\r\n    if (end && colon) {\r\n      if (!customProperty) {\r\n        while (tokens.length) {\r\n          token = tokens[tokens.length - 1][0]\r\n          if (token !== 'space' && token !== 'comment') break\r\n          this.tokenizer.back(tokens.pop())\r\n        }\r\n      }\r\n      this.decl(tokens, customProperty)\r\n    } else {\r\n      this.unknownWord(tokens)\r\n    }\r\n  }\r\n\r\n  rule(tokens) {\r\n    tokens.pop()\r\n\r\n    let node = new Rule()\r\n    this.init(node, tokens[0][2])\r\n\r\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens)\r\n    this.raw(node, 'selector', tokens)\r\n    this.current = node\r\n  }\r\n\r\n  decl(tokens, customProperty) {\r\n    let node = new Declaration()\r\n    this.init(node, tokens[0][2])\r\n\r\n    let last = tokens[tokens.length - 1]\r\n    if (last[0] === ';') {\r\n      this.semicolon = true\r\n      tokens.pop()\r\n    }\r\n    node.source.end = this.getPosition(last[3] || last[2])\r\n\r\n    while (tokens[0][0] !== 'word') {\r\n      if (tokens.length === 1) this.unknownWord(tokens)\r\n      node.raws.before += tokens.shift()[1]\r\n    }\r\n    node.source.start = this.getPosition(tokens[0][2])\r\n\r\n    node.prop = ''\r\n    while (tokens.length) {\r\n      let type = tokens[0][0]\r\n      if (type === ':' || type === 'space' || type === 'comment') {\r\n        break\r\n      }\r\n      node.prop += tokens.shift()[1]\r\n    }\r\n\r\n    node.raws.between = ''\r\n\r\n    let token\r\n    while (tokens.length) {\r\n      token = tokens.shift()\r\n\r\n      if (token[0] === ':') {\r\n        node.raws.between += token[1]\r\n        break\r\n      } else {\r\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\r\n          this.unknownWord([token])\r\n        }\r\n        node.raws.between += token[1]\r\n      }\r\n    }\r\n\r\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\r\n      node.raws.before += node.prop[0]\r\n      node.prop = node.prop.slice(1)\r\n    }\r\n\r\n    let firstSpaces = []\r\n    let next\r\n    while (tokens.length) {\r\n      next = tokens[0][0]\r\n      if (next !== 'space' && next !== 'comment') break\r\n      firstSpaces.push(tokens.shift())\r\n    }\r\n\r\n    this.precheckMissedSemicolon(tokens)\r\n\r\n    for (let i = tokens.length - 1; i >= 0; i--) {\r\n      token = tokens[i]\r\n      if (token[1].toLowerCase() === '!important') {\r\n        node.important = true\r\n        let string = this.stringFrom(tokens, i)\r\n        string = this.spacesFromEnd(tokens) + string\r\n        if (string !== ' !important') node.raws.important = string\r\n        break\r\n      } else if (token[1].toLowerCase() === 'important') {\r\n        let cache = tokens.slice(0)\r\n        let str = ''\r\n        for (let j = i; j > 0; j--) {\r\n          let type = cache[j][0]\r\n          if (str.trim().indexOf('!') === 0 && type !== 'space') {\r\n            break\r\n          }\r\n          str = cache.pop()[1] + str\r\n        }\r\n        if (str.trim().indexOf('!') === 0) {\r\n          node.important = true\r\n          node.raws.important = str\r\n          tokens = cache\r\n        }\r\n      }\r\n\r\n      if (token[0] !== 'space' && token[0] !== 'comment') {\r\n        break\r\n      }\r\n    }\r\n\r\n    let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment')\r\n\r\n    if (hasWord) {\r\n      node.raws.between += firstSpaces.map(i => i[1]).join('')\r\n      firstSpaces = []\r\n    }\r\n    this.raw(node, 'value', firstSpaces.concat(tokens), customProperty)\r\n\r\n    if (node.value.includes(':') && !customProperty) {\r\n      this.checkMissedSemicolon(tokens)\r\n    }\r\n  }\r\n\r\n  atrule(token) {\r\n    let node = new AtRule()\r\n    node.name = token[1].slice(1)\r\n    if (node.name === '') {\r\n      this.unnamedAtrule(node, token)\r\n    }\r\n    this.init(node, token[2])\r\n\r\n    let type\r\n    let prev\r\n    let shift\r\n    let last = false\r\n    let open = false\r\n    let params = []\r\n    let brackets = []\r\n\r\n    while (!this.tokenizer.endOfFile()) {\r\n      token = this.tokenizer.nextToken()\r\n      type = token[0]\r\n\r\n      if (type === '(' || type === '[') {\r\n        brackets.push(type === '(' ? ')' : ']')\r\n      } else if (type === '{' && brackets.length > 0) {\r\n        brackets.push('}')\r\n      } else if (type === brackets[brackets.length - 1]) {\r\n        brackets.pop()\r\n      }\r\n\r\n      if (brackets.length === 0) {\r\n        if (type === ';') {\r\n          node.source.end = this.getPosition(token[2])\r\n          this.semicolon = true\r\n          break\r\n        } else if (type === '{') {\r\n          open = true\r\n          break\r\n        } else if (type === '}') {\r\n          if (params.length > 0) {\r\n            shift = params.length - 1\r\n            prev = params[shift]\r\n            while (prev && prev[0] === 'space') {\r\n              prev = params[--shift]\r\n            }\r\n            if (prev) {\r\n              node.source.end = this.getPosition(prev[3] || prev[2])\r\n            }\r\n          }\r\n          this.end(token)\r\n          break\r\n        } else {\r\n          params.push(token)\r\n        }\r\n      } else {\r\n        params.push(token)\r\n      }\r\n\r\n      if (this.tokenizer.endOfFile()) {\r\n        last = true\r\n        break\r\n      }\r\n    }\r\n\r\n    node.raws.between = this.spacesAndCommentsFromEnd(params)\r\n    if (params.length) {\r\n      node.raws.afterName = this.spacesAndCommentsFromStart(params)\r\n      this.raw(node, 'params', params)\r\n      if (last) {\r\n        token = params[params.length - 1]\r\n        node.source.end = this.getPosition(token[3] || token[2])\r\n        this.spaces = node.raws.between\r\n        node.raws.between = ''\r\n      }\r\n    } else {\r\n      node.raws.afterName = ''\r\n      node.params = ''\r\n    }\r\n\r\n    if (open) {\r\n      node.nodes = []\r\n      this.current = node\r\n    }\r\n  }\r\n\r\n  end(token) {\r\n    if (this.current.nodes && this.current.nodes.length) {\r\n      this.current.raws.semicolon = this.semicolon\r\n    }\r\n    this.semicolon = false\r\n\r\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\r\n    this.spaces = ''\r\n\r\n    if (this.current.parent) {\r\n      this.current.source.end = this.getPosition(token[2])\r\n      this.current = this.current.parent\r\n    } else {\r\n      this.unexpectedClose(token)\r\n    }\r\n  }\r\n\r\n  endFile() {\r\n    if (this.current.parent) this.unclosedBlock()\r\n    if (this.current.nodes && this.current.nodes.length) {\r\n      this.current.raws.semicolon = this.semicolon\r\n    }\r\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\r\n  }\r\n\r\n  freeSemicolon(token) {\r\n    this.spaces += token[1]\r\n    if (this.current.nodes) {\r\n      let prev = this.current.nodes[this.current.nodes.length - 1]\r\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\r\n        prev.raws.ownSemicolon = this.spaces\r\n        this.spaces = ''\r\n      }\r\n    }\r\n  }\r\n\r\n  // Helpers\r\n\r\n  getPosition(offset) {\r\n    let pos = this.input.fromOffset(offset)\r\n    return {\r\n      offset,\r\n      line: pos.line,\r\n      column: pos.col\r\n    }\r\n  }\r\n\r\n  init(node, offset) {\r\n    this.current.push(node)\r\n    node.source = {\r\n      start: this.getPosition(offset),\r\n      input: this.input\r\n    }\r\n    node.raws.before = this.spaces\r\n    this.spaces = ''\r\n    if (node.type !== 'comment') this.semicolon = false\r\n  }\r\n\r\n  raw(node, prop, tokens, customProperty) {\r\n    let token, type\r\n    let length = tokens.length\r\n    let value = ''\r\n    let clean = true\r\n    let next, prev\r\n\r\n    for (let i = 0; i < length; i += 1) {\r\n      token = tokens[i]\r\n      type = token[0]\r\n      if (type === 'space' && i === length - 1 && !customProperty) {\r\n        clean = false\r\n      } else if (type === 'comment') {\r\n        prev = tokens[i - 1]\r\n        next = tokens[i + 1]\r\n        if (prev && next && prev[0] !== 'space' && next[0] !== 'space') {\r\n          value += token[1]\r\n        } else {\r\n          clean = false\r\n        }\r\n      } else {\r\n        value += token[1]\r\n      }\r\n    }\r\n    if (!clean) {\r\n      let raw = tokens.reduce((all, i) => all + i[1], '')\r\n      node.raws[prop] = { value, raw }\r\n    }\r\n    node[prop] = value\r\n  }\r\n\r\n  spacesAndCommentsFromEnd(tokens) {\r\n    let lastTokenType\r\n    let spaces = ''\r\n    while (tokens.length) {\r\n      lastTokenType = tokens[tokens.length - 1][0]\r\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break\r\n      spaces = tokens.pop()[1] + spaces\r\n    }\r\n    return spaces\r\n  }\r\n\r\n  spacesAndCommentsFromStart(tokens) {\r\n    let next\r\n    let spaces = ''\r\n    while (tokens.length) {\r\n      next = tokens[0][0]\r\n      if (next !== 'space' && next !== 'comment') break\r\n      spaces += tokens.shift()[1]\r\n    }\r\n    return spaces\r\n  }\r\n\r\n  spacesFromEnd(tokens) {\r\n    let lastTokenType\r\n    let spaces = ''\r\n    while (tokens.length) {\r\n      lastTokenType = tokens[tokens.length - 1][0]\r\n      if (lastTokenType !== 'space') break\r\n      spaces = tokens.pop()[1] + spaces\r\n    }\r\n    return spaces\r\n  }\r\n\r\n  stringFrom(tokens, from) {\r\n    let result = ''\r\n    for (let i = from; i < tokens.length; i++) {\r\n      result += tokens[i][1]\r\n    }\r\n    tokens.splice(from, tokens.length - from)\r\n    return result\r\n  }\r\n\r\n  colon(tokens) {\r\n    let brackets = 0\r\n    let token, type, prev\r\n    for (let [i, element] of tokens.entries()) {\r\n      token = element\r\n      type = token[0]\r\n\r\n      if (type === '(') {\r\n        brackets += 1\r\n      }\r\n      if (type === ')') {\r\n        brackets -= 1\r\n      }\r\n      if (brackets === 0 && type === ':') {\r\n        if (!prev) {\r\n          this.doubleColon(token)\r\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\r\n          continue\r\n        } else {\r\n          return i\r\n        }\r\n      }\r\n\r\n      prev = token\r\n    }\r\n    return false\r\n  }\r\n\r\n  // Errors\r\n\r\n  unclosedBracket(bracket) {\r\n    throw this.input.error(\r\n      'Unclosed bracket',\r\n      { offset: bracket[2] },\r\n      { offset: bracket[2] + 1 }\r\n    )\r\n  }\r\n\r\n  unknownWord(tokens) {\r\n    throw this.input.error(\r\n      'Unknown word',\r\n      { offset: tokens[0][2] },\r\n      { offset: tokens[0][2] + tokens[0][1].length }\r\n    )\r\n  }\r\n\r\n  unexpectedClose(token) {\r\n    throw this.input.error(\r\n      'Unexpected }',\r\n      { offset: token[2] },\r\n      { offset: token[2] + 1 }\r\n    )\r\n  }\r\n\r\n  unclosedBlock() {\r\n    let pos = this.current.source.start\r\n    throw this.input.error('Unclosed block', pos.line, pos.column)\r\n  }\r\n\r\n  doubleColon(token) {\r\n    throw this.input.error(\r\n      'Double colon',\r\n      { offset: token[2] },\r\n      { offset: token[2] + token[1].length }\r\n    )\r\n  }\r\n\r\n  unnamedAtrule(node, token) {\r\n    throw this.input.error(\r\n      'At-rule without name',\r\n      { offset: token[2] },\r\n      { offset: token[2] + token[1].length }\r\n    )\r\n  }\r\n\r\n  precheckMissedSemicolon(/* tokens */) {\r\n    // Hook for Safe Parser\r\n  }\r\n\r\n  checkMissedSemicolon(tokens) {\r\n    let colon = this.colon(tokens)\r\n    if (colon === false) return\r\n\r\n    let founded = 0\r\n    let token\r\n    for (let j = colon - 1; j >= 0; j--) {\r\n      token = tokens[j]\r\n      if (token[0] !== 'space') {\r\n        founded += 1\r\n        if (founded === 2) break\r\n      }\r\n    }\r\n    // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\r\n    // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\r\n    // And because we need it after that one we do +1 to get the next one.\r\n    throw this.input.error(\r\n      'Missed semicolon',\r\n      token[0] === 'word' ? token[3] + 1 : token[2]\r\n    )\r\n  }\r\n}\r\n\r\nmodule.exports = Parser\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}